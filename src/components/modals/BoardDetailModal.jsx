import React, { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import Modal from "./Modal";
import CardDetailModal from "./CardDetailModal";
import SessionModal from "./SessionModal"; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫—É —Å–µ—Å—Å–∏–∏
import { updateCard } from "../../api/cardsApi"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
import "../../styles/modals/BoardDetailModal.css";

function BoardDetailModal({ isOpen, onClose, boardDetail, cards, onDeleteCard, onOpenAddCardModal }) {
  const [selectedCard, setSelectedCard] = useState(null);
  const [isSessionOpen, setIsSessionOpen] = useState(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏
  const queryClient = useQueryClient();

  // ‚úÖ useMutation –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  const updateCardMutation = useMutation({
    mutationFn: ({ cardId, formData }) => updateCard(cardId, formData),
    onSuccess: () => {
      queryClient.invalidateQueries(["cards", boardDetail?.id]); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
    },
  });

  // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const handleUpdateCard = (cardId, formData) => {
    updateCardMutation.mutate({ cardId, formData });
  };

  if (!boardDetail) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <h2>{boardDetail.title}</h2>
      <p>{boardDetail.description}</p>

      <h3>–ö–∞—Ä—Ç–æ—á–∫–∏</h3>
      {cards && cards.length > 0 ? (
        <div className="card-gallery">
          {cards.map((card) => (
            <div key={card.id} className="card-item" onClick={() => setSelectedCard(card)}>
              {card.image_url ? (
                <img src={`http://127.0.0.1:8000/${card.image_url}`} alt={card.text} className="card-image" />
              ) : (
                <div className="no-image">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
              )}
              <div className="card-text">
                <strong>{card.text}</strong>
                <p>{card.short_description}</p>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫</p>
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫ */}
      <div className="modal-buttons">
        <button className="modal-button" onClick={onOpenAddCardModal}>
          –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        </button>
        <button className="modal-button" onClick={() => setIsSessionOpen(true)}>
          –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      {selectedCard && (
        <CardDetailModal
        isOpen={!!selectedCard}
        onClose={() => setSelectedCard(null)}
        card={selectedCard}
        onUpdateCard={handleUpdateCard} 
        onDeleteCard={onDeleteCard}
        onCardUpdated={(updatedCard) => {
          // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          setSelectedCard(updatedCard);
        }}
      />
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ —Å–µ—Å—Å–∏–∏ */}
      {isSessionOpen && (
        <SessionModal isOpen={isSessionOpen} onClose={() => setIsSessionOpen(false)} cards={cards} />
      )}
    </Modal>
  );
}

export default BoardDetailModal;
