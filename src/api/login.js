import apiClient from "./apiClient";

// –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –≤ localStorage
const saveAccessToken = (token) => {
  localStorage.setItem("access_token", token);
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh_token –≤ localStorage
const saveRefreshToken = (token) => {
  localStorage.setItem("refresh_token", token);
};

// üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (data) => {
  try {
    const response = await apiClient.post("/auth/token", data);
    const { access_token, refresh_token } = response.data;

    saveAccessToken(access_token);
    saveRefreshToken(refresh_token);

    return response.data;
  } catch (error) {
    // ‚ùó –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 401 (–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å)
    if (error.response?.status === 401) {
      alert("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    } else {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    }

    throw error;
  }
};

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ –ø–æ refresh —Ç–æ–∫–µ–Ω—É
export const refreshAccessToken = async () => {
  try {
    const refreshToken = localStorage.getItem("refresh_token");
    if (!refreshToken) throw new Error("Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");

    const response = await apiClient.post("/auth/refresh", {
      refresh_token: refreshToken,
    });

    const { access_token, refresh_token: newRefreshToken } = response.data;

    localStorage.setItem("access_token", access_token);
    localStorage.setItem("refresh_token", newRefreshToken);

    return access_token;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞", error);
    throw error;
  }
};
