import axios from "axios";
import { refreshAccessToken } from "./login";

const apiClient = axios.create({
  baseURL: "http://127.0.0.1:8000",
  withCredentials: true,
  headers: {
    "Content-Type": "application/json",
  },
});

// üëâ –î–æ–±–∞–≤–ª—è–µ–º access token –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("access_token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// üëâ –û—Ç–≤–µ—Ç—ã: –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // ‚õî –ù–µ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ—Ñ—Ä–µ—à–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è /auth/token –∏ /auth/refresh
    const isAuthEndpoint =
      originalRequest.url.includes("/auth/token") ||
      originalRequest.url.includes("/auth/refresh");

    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !isAuthEndpoint
    ) {
      originalRequest._retry = true;

      try {
        const newAccessToken = await refreshAccessToken();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π access token
        localStorage.setItem("access_token", newAccessToken);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return apiClient(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", refreshError);

        // üîì –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å
        localStorage.removeItem("access_token");
        localStorage.removeItem("refresh_token");

        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default apiClient;
